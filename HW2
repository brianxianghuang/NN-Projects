import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import SGD, Adam
from keras.utils import to_categorical

# 資料
wine = load_wine()
X = wine.data
y = wine.target

y = to_categorical(y) #轉成one-hot encode

#MLP funct
def train_mlp(X_train, y_train, X_test, y_test, hidden_layers, neurons, learning_rate, optimizer):
    X_train, X_test = apply_data_preprocessing(X_train, X_test, configurations['Data Preprocessing'])

    model = Sequential()
    model.add(Dense(neurons, input_dim=X_train.shape[1], activation='sigmoid'))
    for _ in range(hidden_layers - 1):
        model.add(Dense(neurons, activation='sigmoid'))
    model.add(Dense(3, activation='sigmoid'))
    model.compile(loss='mean_squared_error', optimizer=SGD(learning_rate=learning_rate) if optimizer == SGD else Adam(learning_rate=learning_rate), metrics=['accuracy'])  #optimizer 預設用SGD 因為要讀取learning rate 否則用Adam
    history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100, verbose=0)
    return model, history

#data preprocessing
def apply_data_preprocessing(X_train, X_test, method):
    if method == 'MinMax':
        scaler = MinMaxScaler()
    elif method == 'ZScore':
        scaler = StandardScaler()
    else:
        raise ValueError("Invalid data preprocessing method")

    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    return X_train, X_test

#split funct
def split_data(train_ratio):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1 - train_ratio, random_state=42)
    return X_train, X_test, y_train, y_test

#參數
configurations = {
    'Training to Test Ratio': 0.8,
    'Data Preprocessing': 'MinMax',       #ZScore or MinMax
    'Learning Rate': 0.05,
    'Optimizer': Adam,                  #Adam or  SGD
    'Hidden Layers': 2,
    'Neurons per Hidden Layer': 4
}


X_train, X_test, y_train, y_test = split_data(configurations['Training to Test Ratio'])

#Train
model, history = train_mlp(X_train, y_train, X_test, y_test, configurations['Hidden Layers'], configurations['Neurons per Hidden Layer'], configurations['Learning Rate'], configurations['Optimizer'])

#result
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f"Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.4f}")

# Visualization
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Learning Curves (Loss)')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Learning Curves (Accuracy)')
plt.legend()

plt.tight_layout()
plt.show()
