#導入程式庫、從drive導入資料集

from keras.models import Sequential ,load_model
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import tensorflow as tf
from google.colab import drive
drive.mount('/content/drive')

#train data，方法如上標題所言 可補充有使用earlystop 來加速訓練

data_dir = 'data'

# Define the CNN model
model = Sequential()
model.add(Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(150, 150, 3)))
model.add(MaxPooling2D((3, 3)))
model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
model.add(MaxPooling2D((3, 3)))
model.add(Conv2D(16, (2, 2), activation='relu', padding='same'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(6, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

datagen = ImageDataGenerator(rescale=1./255,
                             shear_range=0.2,
                             zoom_range=0.2,
                             horizontal_flip=True)

train_generator = datagen.flow_from_directory(
    directory='drive/MyDrive/data/seg_train/seg_train',
    target_size=(150, 150),
    batch_size=6,
    class_mode='categorical',
    classes=['buildings', 'forest', 'glacier', 'mountain', 'sea', 'street'])

validation_generator = datagen.flow_from_directory(
    directory='drive/MyDrive/data/seg_test/seg_test',
    target_size=(150, 150),
    batch_size=8,
    class_mode='categorical',
    classes=['buildings', 'forest', 'glacier', 'mountain', 'sea', 'street'])


earlystop_callback = tf.keras.callbacks.EarlyStopping(monitor = 'sparse_categorical_crossentropy',min_delta = 0.005, patience = 3)

# Train the model
#history = model.fit(train_generator,
                    steps_per_epoch=len(train_generator),
                    epochs=6,
                    validation_data=validation_generator,
                    validation_steps=len(validation_generator))



#將訓練好的model拿來分類未分類的圖片 並視覺化訓練與驗證曲線


pred_generator = datagen.flow_from_directory(
    directory='drive/MyDrive/data/seg_pred',
    target_size=(150, 150),
    batch_size=16,
    class_mode='categorical',
    classes=['seg_pred'])  # 將pred全部當作一個類別


# Plot learning curves
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()



# Get predictions
predictions = model.predict(pred_generator)

# 將預測結果轉換為類別標籤
class_names = ['building' , 'forest' , 'glacier' , 'mountain' , 'sea' , 'street']
predicted_classes = [class_names[i] for i in predictions.argmax(axis=1)]

# 打印預測結果
for i in range(len(pred_generator.filenames)):
    print(f"File: {pred_generator.filenames[i]}, Predicted Class: {predicted_classes[i]}")

#抽樣隨機測試、用肉眼檢驗分類是否正確

import random
import matplotlib.pyplot as plt
from matplotlib.pyplot import imshow
from PIL import Image
import os

# Get the indices of 20 random images
random_indices = random.sample(range(len(pred_generator.filenames)), 20)

# Display the randomly selected images and their predicted labels
for i in random_indices:
    image_path = os.path.join('drive/MyDrive/data/seg_pred', pred_generator.filenames[i])
    img = Image.open(image_path)

    plt.figure()
    imshow(img)
    plt.title(f"Predicted Class: {predicted_classes[i]}")
    plt.axis('off')

plt.show()
