from keras.datasets import imdb
from keras.models import Sequential
from keras.layers import Embedding, Flatten, Dense,Conv1D, MaxPooling1D
from keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
import numpy as np

# Load the IMDB dataset
max_words = 10000  # Consider only the top 10,000 words in the dataset
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=max_words)

# (1) Data Preprocessing:
# Pad sequences to ensure uniform length
max_length = 200  # You can adjust this based on your data and model requirements
X_train = pad_sequences(X_train, maxlen=max_length)
X_test = pad_sequences(X_test, maxlen=max_length)

# Convert labels to numpy array
y_train = np.array(y_train)
y_test = np.array(y_test)

# Split the data into training and testing sets
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# (2) Word2Vec Embeddings:
# Since we don't have pre-trained Word2Vec embeddings in this case, we'll use Embedding layer directly.

# (3) Model 1 - MLP:
mlp_model = Sequential()
mlp_model.add(Embedding(max_words, 50, input_length=max_length))
mlp_model.add(Flatten())
mlp_model.add(Dense(64, activation='relu'))
mlp_model.add(Dense(1, activation='sigmoid'))
mlp_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train and evaluate MLP model
mlp_model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_val, y_val))

# (4) Model 2 - CNN:
cnn_model = Sequential()
cnn_model.add(Embedding(max_words, 50, input_length=max_length))
cnn_model.add(Conv1D(128, 5, activation='relu'))
cnn_model.add(MaxPooling1D(5))
cnn_model.add(Flatten())
cnn_model.add(Dense(64, activation='relu'))
cnn_model.add(Dense(1, activation='sigmoid'))
cnn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train and evaluate CNN model
cnn_model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_val, y_val))

# (5) Analysis and Comparison:
# Evaluate and compare the performance of both models.
mlp_scores = mlp_model.evaluate(X_test, y_test)
cnn_scores = cnn_model.evaluate(X_test, y_test)

print("MLP Model - Test Accuracy:", mlp_scores[1])
print("CNN Model - Test Accuracy:", cnn_scores[1])
